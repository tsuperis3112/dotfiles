# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME=""

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(sudo zsh-autosuggestions zsh-syntax-highlighting git asdf docker kubectl aws zsh-interactive-cd minikube)

case ${OSTYPE} in
darwin*)
    plugins=(macos $plugins)
    ;;
linux*)
    ;;
esac

fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#PROMPT='$(git_prompt_short_sha)'
#RPROMPT='[%*]'

# Ctrl+u
bindkey \^U backward-kill-line

if [ -f ~/.sh_aliases ]; then
    . ~/.sh_aliases
fi

for f in $(find "$HOME/.shell.d/" -type f -name \*.sh -or -name \*.zsh); do
  if [ -f $f ]; then
      . $f
  fi
done

prompt_color="%F{252}"
curdir_color="%F{034}"
secondary_color="%F{242}"

# dashed separator size
export VIRTUAL_ENV_DISABLE_PROMPT=1

function __pyvenv {
  local pyvenv_dir="${VIRTUAL_ENV:-$CONDA_DEFAULT_ENV}"
  local pyvenv="${pyvenv_dir##*/}"
  if [ -n "$pyvenv" ]; then
    echo "py:$pyvenv"
  fi
}

function __statusline {
  local code="$?"

  local rmargin=$COLUMNS
  local elements=()
  local strcount

  # status code
  if [ $code -eq 0 ]; then
    code="%F{002}$code%f"
  else
    code="%F{001}$code%f"
  fi
  strcount=$(( ${#code} - 7 ))
  if [ $rmargin -ge $strcount ]; then
    elements+=("$code")
    let rmargin-=$strcount
  fi

  # time
  local hhmmss="$(date +"%H:%M:%S")"
  strcount=$(( ${#hhmmss} + 3 ))
  if [ $rmargin -ge $strcount ]; then
    elements+=("$hhmmss")
    let rmargin-=$strcount
  fi

  # python virtualenv
  local pyvenv=$(__pyvenv)
  strcount=$(( ${#pyvenv} + 3 ))
  if [ -n "$pyvenv" ] && [ $rmargin -ge $strcount ]; then
    elements+=("$pyvenv")
    let rmargin-=$strcount
  fi

  # construct status lne
  local info="${secondary_color}"
  for i in {1..$#elements}; do
    local tmp="[${elements[$i]}${secondary_color}]"
    if [ $i -eq 1 ]; then
      info+="$tmp"
    else
      info+="-$tmp"
    fi
  done

  [ $rmargin -lt 0 ] && rmargin=0
  echo "${info}${(l.rmargin..-.)}%f"
}

# primary prompt: dashed separator, directory and vcs info
PROMPT="\$(__statusline)
${curdir_color}%B%~%f%b \$(__git_prompt)${prompt_color}%(!.#.$) %f"
PROMPT2="${prompt_color}> %f"

RPROMPT="${secondary_color}%B%n@%m%b%f"

# git prompt
function __git_prompt() {
  if ! __git_prompt_git rev-parse --git-dir &> /dev/null \
     || [[ "$(__git_prompt_git config --get oh-my-zsh.hide-info 2>/dev/null)" == 1 ]]; then
    return 0
  fi

  local ref
  ref=$(__git_prompt_git symbolic-ref --short HEAD 2> /dev/null)
  if [ -z "$ref" ]; then
    tag=$(__git_prompt_git describe --tags --exact-match HEAD 2> /dev/null)
    if [ -n "$tag"]; then
      ref="tag::$tag"
    else
      ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null)
    fi
  fi

  [ -z "$ref" ] && return 0

  echo "%f%b(%B%F{062}${ref:gs/%/%%}%b%f$(git_prompt_status)%f%b)"
}

ZSH_THEME_GIT_PROMPT_PREFIX="%f%b("
ZSH_THEME_GIT_PROMPT_SUFFIX="%f%b)"
ZSH_THEME_GIT_PROMPT_DELETED="%F{178}-"
ZSH_THEME_GIT_PROMPT_MODIFIED="%F{213}*"
ZSH_THEME_GIT_PROMPT_ADDED="%F{010}+"
ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{009}?"
ZSH_THEME_GIT_PROMPT_RENAMED="%F{031}~"
ZSH_THEME_GIT_PROMPT_UNMERGED="%F{124}!"
ZSH_THEME_GIT_PROMPT_AHEAD="%f>"
ZSH_THEME_GIT_PROMPT_BEHIND="%f<"
ZSH_THEME_GIT_PROMPT_DIVERGED="%f<>"
ZSH_THEME_GIT_PROMPT_STASHED="%F{027}..%f"

